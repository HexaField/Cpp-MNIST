#define TS 32
#define WPT 1
#define RTS 32

__kernel void matrixMultiplication(int widthA, int heightB, int commonDim, __global float* inputA, __global float* inputB, __global float* outputC)
{
    const int row = get_local_id(0); // Local row ID (max: TS)
    const int col = get_local_id(1); // Local col ID (max: TS / WPT == RTS)
    const int globalRow = TS * get_global_id(0) + row; // Row ID of C (0..M)
    const int globalCol = TS * get_global_id(1) + col; // Col ID of C (0..N)

    __local float Asub[TS][TS];
    __local float Bsub[TS][TS];

    float acc[WPT];
    for (int w = 0; w < WPT; w++)
    {
        acc[w] = 0.0f;
    }

    const int numTiles = commonDim / TS;
    for (int t = 0; t < numTiles; t++)
    {
        for (int w=0; w < WPT; w++)
        {
            const int tiledRow = TS * t + row;
            const int tiledCol = TS * t + col;
            Asub[col + w * RTS][row] = inputA[(tiledCol + w * RTS) * widthA + globalRow];
            Bsub[col + w * RTS][row] = inputB[(globalCol  + w * RTS) * commonDim + tiledRow];
        }

        barrier(CLK_LOCAL_MEM_FENCE);

        for (int k = 0; k < TS; k++)
        {
            for (int w = 0; w < WPT; w++)
            {
                acc[w] += Asub[k][row] * Bsub[col + w * RTS][k];
            }
        }

        barrier(CLK_LOCAL_MEM_FENCE);
    }

    for (int w = 0; w < WPT; w++)
    {
        outputC[(globalCol + w * RTS) * widthA + globalRow] = acc[w];
    }
}